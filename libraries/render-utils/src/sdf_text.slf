<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//  sdf_text.frag
//  fragment shader
//
//  Created by Bradley Austin Davis on 2015-02-04
//  Based on fragment shader code from 
//  https://github.com/paulhoux/Cinder-Samples/blob/master/TextRendering/include/text/Text.cpp 
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html

uniform sampler2D Font;
uniform vec4 Color;
uniform bool Outline;

varying vec2 vTexCoord;

const float gamma = 2.6;
const float smoothing = 100.0;
const float interiorCutoff = 0.8;
const float outlineExpansion = 0.2;

void main() {
  // retrieve signed distance
  float sdf = texture2D(Font, vTexCoord).r;
  if (Outline) {
    if (sdf > interiorCutoff) {
      sdf = 1.0 - sdf;
    } else {
      sdf += outlineExpansion;
    }
  }
  // perform adaptive anti-aliasing of the edges
  // The larger we're rendering, the less anti-aliasing we need
  float s = smoothing * length(fwidth(vTexCoord));
  float w = clamp( s, 0.0, 0.5);
  float a = smoothstep(0.5 - w, 0.5 + w, sdf);

  // gamma correction for linear attenuation
  a = pow(a, 1.0 / gamma);

  if (a < 0.01) {
    discard;
  }

  // final color
  gl_FragColor = vec4(Color.rgb, a);
}