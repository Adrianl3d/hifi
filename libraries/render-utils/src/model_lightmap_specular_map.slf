<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_lightmap_specular_map.frag
//  fragment shader
//
//  Created by Samuel Gateau on 11/19/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include model/Material.slh@>

// the diffuse texture
uniform sampler2D diffuseMap;

// the emissive map texture and parameters
uniform sampler2D emissiveMap;
uniform vec2 emissiveParams;

// the specular texture
uniform sampler2D specularMap;

// the interpolated normal
varying vec4 interpolatedNormal;

varying vec2 interpolatedTexcoord1;

varying vec3 color;

void main(void) {
    // set the diffuse, normal, specular data
    vec4 diffuse = texture2D(diffuseMap, gl_TexCoord[0].st);
    vec3 specular = texture2D(specularMap, gl_TexCoord[0].st).rgb;
    vec4 emissive = texture2D(emissiveMap, interpolatedTexcoord1.st);

    Material mat = getMaterial();

    packDeferredFragmentLightmap(
        normalize(interpolatedNormal.xyz), 
        evalOpaqueFinalAlpha(getMaterialOpacity(mat), diffuse.a),
        getMaterialDiffuse(mat) * diffuse.rgb * color,
        specular, // no use of getMaterialSpecular(mat)
        getMaterialShininess(mat),
        (vec3(emissiveParams.x) + emissiveParams.y * emissive.rgb));
}
