<!
//  Material.slh
//  fragment shader
//
//  Created by Sam Gateau on 12/16/14.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MODEL_MATERIAL_SLH@>
<@def MODEL_MATERIAL_SLH@>

struct Material { 
    vec4 _diffuse;
    vec4 _specular;
    vec4 _emissive;
    vec4 _spare;
};

float getMaterialOpacity(Material m) { return m._diffuse.a; }
vec3 getMaterialDiffuse(Material m) { return m._diffuse.rgb; }
vec3 getMaterialSpecular(Material m) { return m._specular.rgb; }
float getMaterialShininess(Material m) { return m._specular.a; }



<@if GPU_FEATURE_PROFILE == GPU_CORE@>
uniform materialBuffer {
    Material _mat;
};
Material getMaterial() {
    return _mat;
}
<@else@>
uniform vec4 materialBuffer[4];
Material getMaterial() {
    Material mat;
    mat._diffuse = materialBuffer[0];
    mat._specular = materialBuffer[1];
    mat._emissive = materialBuffer[2];
    mat._spare = materialBuffer[3];
    return mat;    
}
<@endif@>



<@endif@>
